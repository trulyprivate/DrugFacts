# NestJS Backend Dockerfile with multi-stage build
# Base image with Node.js 20 Alpine
FROM node:20-alpine AS base

# Install dependencies for building native modules
RUN apk add --no-cache libc6-compat

# Set working directory
WORKDIR /app

# Copy package files for dependency installation
COPY backend/drugfacts-api/package*.json ./

# Development stage
FROM base AS development

# Install all dependencies (including dev dependencies)
RUN npm ci --legacy-peer-deps

# Copy source code
COPY backend/drugfacts-api/ ./

# Expose port for development
EXPOSE 3001

# Create non-root user for security
RUN addgroup --system --gid 1001 nestjs
RUN adduser --system --uid 1001 nestjs

# Set ownership
RUN chown -R nestjs:nestjs /app
USER nestjs

# Start in development mode with hot reloading
CMD ["npm", "run", "start:dev"]

# Production dependencies stage
FROM base AS deps

# Install only production dependencies
RUN npm ci --only=production --legacy-peer-deps && npm cache clean --force

# Build stage
FROM base AS builder

# Install all dependencies for building
RUN npm ci --legacy-peer-deps

# Copy source code
COPY backend/drugfacts-api/ ./

# Build the application
RUN npm run build

# Production stage
FROM node:20-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Set working directory
WORKDIR /app

# Create non-root user
RUN addgroup --system --gid 1001 nestjs
RUN adduser --system --uid 1001 nestjs

# Copy production dependencies
COPY --from=deps --chown=nestjs:nestjs /app/node_modules ./node_modules

# Copy built application
COPY --from=builder --chown=nestjs:nestjs /app/dist ./dist
COPY --from=builder --chown=nestjs:nestjs /app/package*.json ./

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3001

# Switch to non-root user
USER nestjs

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/main"]