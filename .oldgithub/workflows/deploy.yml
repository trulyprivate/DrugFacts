name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test --if-present
      
      - name: Build project
        run: npm run build
        env:
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENPIPE_API_KEY: ${{ secrets.OPENPIPE_API_KEY }}

  deploy-digitalocean:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Update DigitalOcean App Platform spec
        run: |
          # Update the app.yaml with the correct GitHub repo
          sed -i "s|trulyprivate|${{ github.repository_owner }}|g" .do/app.yaml
      
      - name: Deploy to DigitalOcean App Platform
        run: |
          # Check if app exists
          if doctl apps list --format ID,Spec.Name | grep -q "drugfacts"; then
            # Update existing app
            APP_ID=$(doctl apps list --format ID,Spec.Name | grep "drugfacts" | awk '{print $1}')
            doctl apps update $APP_ID --spec .do/app.yaml
          else
            # Create new app
            doctl apps create --spec .do/app.yaml
          fi
      
      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          APP_ID=$(doctl apps list --format ID,Spec.Name | grep "drugfacts" | awk '{print $1}')
          
          # Wait for deployment to complete (max 10 minutes)
          for i in {1..60}; do
            STATUS=$(doctl apps get $APP_ID --format ActiveDeployment.Phase --no-header)
            if [ "$STATUS" = "ACTIVE" ]; then
              echo "Deployment successful!"
              break
            elif [ "$STATUS" = "ERROR" ]; then
              echo "Deployment failed!"
              exit 1
            else
              echo "Current status: $STATUS. Waiting..."
              sleep 10
            fi
          done
      
      - name: Get app URL
        run: |
          APP_ID=$(doctl apps list --format ID,Spec.Name | grep "drugfacts" | awk '{print $1}')
          APP_URL=$(doctl apps get $APP_ID --format DefaultIngress --no-header)
          echo "App deployed at: https://$APP_URL"
          echo "APP_URL=https://$APP_URL" >> $GITHUB_ENV
      
      - name: Health check
        run: |
          sleep 30  # Give the app time to start
          curl -f ${{ env.APP_URL }}/api/health || exit 1

  deploy-docker:
    needs: test
    runs-on: ubuntu-latest
    if: ${{ vars.USE_DOCKER_DEPLOYMENT == 'true' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
          MONGODB_DB_NAME: ${{ secrets.MONGODB_DB_NAME }}
          MONGODB_COLLECTION_NAME: ${{ secrets.MONGODB_COLLECTION_NAME }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENPIPE_API_KEY: ${{ secrets.OPENPIPE_API_KEY }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
      
      - name: Deploy to Docker Hub
        if: success()
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker build -t ${{ secrets.DOCKER_USERNAME }}/drugfacts:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/drugfacts:latest
      
      - name: Deploy to server
        if: success()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd /opt/drugfacts
            docker pull ${{ secrets.DOCKER_USERNAME }}/drugfacts:latest
            docker-compose down
            docker-compose up -d
            docker system prune -f